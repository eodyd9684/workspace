1.dev 브랜치에서 게시판 기능을 구현한 브랜치(board) 생성
2.board 브랜치에서 게시판 기능을 구현한다.
3.완성된 board 브랜치를 dev 브랜치에 병합한다.
4.board 브랜치를 삭제한다.

//////////////////////////////////////////////////////////////////
팀플 진행 방법
팀플할때는 크게 clone, fork 두 가지 방식으로 나뉘어짐
3~5인 정도라는 clone이 낫다는 강사의 개인적 견해로 우리가 clone 방식 사용

1. 팀장 -> 기본 프로젝트 세팅
1-1. 팀장이 팀 프로젝트를 생성
1-2. 프로젝트 파일구조 기본 생성
1-3. remote repository 생성(레포지토리명은 프로젝트명과 동일) 
1-4. git init
1-5. git branch -m main
1-6. git add (LF 경고뜨면. git config core.autocrlf true )
1-7. git commit -m "커밋메세지 상세히"
1-8. git remote add origin 원격저장소url
1-9. git push origin main
1-10. git branch dev
1-11. git checkout dev
1-12. git push origin dev
1-13. default branch를 main에서 dev브랜치로 변경(Settings -> Default branch)
1-14. Settings 
        -> Branches 
        -> Rules에서 Enforcement status(Active로 바꾸기) 
        -> Require a pull request before merging(밑에서 4번째 Required approvals 1로 바꾸기)
2. 팀장이 팀원들을 초대하기(fork 방식을 할 필요 없음)
2-1. 팀장이 Settings ->Collaborators <<팀원초대
2-2. 팀원은 이메일을 확인해서 초대에 응함.

3. 팀원들이 팀장이 올린 프로젝트 내려받기
3-1. 프로젝트 내려받기(dev 브랜치만 내려받기)
     git clone -b dev 팀장의원격저장소url
3-2. 작업할 브렌치를 각자 생성
    git branch 브랜치명
3-3. 각자 브랜치로 이동
    git checkout 브랜치명
3-4. 작업 시작 (팀원들은 본인 이니셜 패키지 및 클래스 생성)
3-5. 작업내역 staging
     git add .
3-6. 작업 내역 commit
    git commit -m "커밋메세지"
3-7. push 하기 전에 내려받을 코드를 확인한다.
    1) dev 브랜치로 이동 : git checkout dev
    2) pull 명령어 실행 : git pull origin dev
    3) 내려받은 파일이 있을때 vs 내려받은 파일이 없을 때
       i) 내려받을 파일이 없을경우
          개인브랜치로 이동해서 3-8진행
       ii) 내려받은 파일이 있을 때
          개인브랜치로 최신화 시켜준다.
           git checkout 개인브랜치 -> git merge 개인브랜치
           3-8을 이어서 진행
3-8. dev 브랜치에서 pull 받는다.
3-9. github에 개인브랜치에 올리기
    git push origin 개인브랜치
3-10. github 사이트에서 pull request(PR)
3-11. 리뷰를 기다린다(급하면 통과)
3-12. merge pull request (본인이) -> 이거하면 알아서 merge 됨
3-13. branch 삭제 -> (버튼 누르면 됨)remote에서만 사라짐
3-14. dev 브랜치의 코드를 최신화 시킨다
     git pull origin dev (이 명령어는 반드시 dev 브랜치에서 실행!)

이 과정이 끝나면 3-2~3-13을 반복적으로 진행
★★★★★어떤 과정에 있던지 무조건 pull 있으면 pull받고 진행★★★★★
상황1. 개인 브랜치에서 코드를 작성 중 PR이 왔다.
     -> 지금까지 하던 내용을 commit 한다
     -> dev 브랜치로 이동한다.
     -> dev 브랜치를 pull 받는다.
     -> 개인 브랜치(작업중이던 브랜치)에서 dev 브랜치를 merge 한다
        -> git checkout 개인브랜치
        -> git merge dev
     -> 작업 이어나간다.




