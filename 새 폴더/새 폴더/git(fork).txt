팀플 git 작업 (fork)
1-1. 팀장이 프로젝트 생성 및 github에 프로젝트 올리기
1-2. 프로젝트 파일구조 기본 생성
1-3. remote repository 생성(repository명은 프로젝트명과 동일)
1-4. git init
1-5. git branch -m main
1-6. git add . (LF 경고뜨면. git config core.autocrlf true)
1-7. git commit -m "커밋메세지 상세히"
1-8. git remote add origin 원격저장소url
1-9. git push origin main
1-10. git branch dev
1-11. git checkout dev
1-12. git push origin dev\
1-13. default branch를 main에서 dev브랜치로 변경(Settings -> Default branch)
1-14. Settings 
        -> Branches 
        -> Rules에서 Enforcement status(Active로 바꾸기) 
        -> Require a pull request before merging(밑에서 4번째 Required approvals 1로 바꾸기)

2. 팀원의 최초 작업
2-1. 팀장의 원격 레포에서 Fork한다.
2-2. forked된(내 레포) 레포의 파일 내려받기
      git clone 원격레포 url
2-3. 팀장의 remote repo와 내 local repo를 연결
      git remote add upstream 팀장원격저장소 url
      (현재 지역저장소와 연결된 원격저장소를 확인하는 명령어: git remote -v)

3. 작업 순서(팀장&팀원 공통)
3-1. 작업할 개인 브랜치 생성
      git branch 브랜치명
3-2. 생성한 브랜치로 이동
      git checkout 브랜치명
      (git checkout -b 브랜치명 -> 3-1, 3-2 동시 진행)
3-3. 코드 작업
3-4. git add .
3-5. git commit -m "커밋메세지"
3-6. 작업한 내역을 원격저장소에 올림(내 원격 저장소!)
      git push origin 개인브랜치명
      (push까지 하면 본인 원격저장소에서 pull request가 발생
      , push를 했지만 원격 레포에는 아직 반영되지 않음)
3-7. pull request 실행
      (원본(팀장)의 레포에 반영해주세요~라는 명령)
3-8. 팀장은 merge 승인
      (이만큼하면 팀장의 원격 저장소에만 수정 사항이 반영됨)
3-9. push한 팀원은 'delete branch' 버튼 클릭 (원격 레포에서만 삭제가 됨)
3-10. dev 브랜치로 이동
       git checkout dev
3-11. 팀장의 dev 브랜치 내용 받아오기(dev 브랜치의 내용 최신화)
        git pull origin dev(팀장)
        git pull upstream dev(팀원)
3-12. 최신화 시킨 로컬 레포를 본인의 원격 레포에도 반영 ※팀장은 X
        git push origin dev
3-13. 작업 완료한 브랜치를 삭제
        git branch -d 삭제할브랜치명

3-1~13반복